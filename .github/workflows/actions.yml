name: Test, Build, Deploy App
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.x' # The Go version to download (if necessary) and use.
      - name: Check go version
        run: go version
      - name: Run go test
        run: |
          go test -v
      - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Run go build
        run: |
          go build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tidus-api-pkg
          path: |
            tidus-api
  deploy_and_uat:
    needs: test_and_build
    environment: uat # configured for approval
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Download go pkg
        uses: actions/download-artifact@v2
        with:
          name: tidus-api-pkg
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Setup SSH key
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github_actions
          cat ~/.ssh/github_actions
          chmod 600 ~/.ssh/github_actions
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/github_actions
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: terraform
      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color
      #   working-directory: terraform
      # - name: Terraform Plan
      #   id: plan
      #   run: terraform plan -no-color -var="env=uat" -var="ssh_pub_key=${{ secrets.SSH_PUBLIC_KEY }}"
      #   working-directory: terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply --auto-approve -no-color -var="env=uat" -var="ssh_pub_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: terraform
      - name: Terraform output
        id: tf_output
        run: terraform output public_ip | sed -n 2p
        working-directory: terraform
      - name: Generate hosts file
        id: generate_hosts
        run: | 
          cd terraform
          terraform output public_ip | sed -n 2p >> ../ansible/hosts
          cd ..
          sed -ie 's/^"/\t\t/g' ./ansible/hosts
          sed -ie 's/"//g' ./ansible/hosts
      - name: Output hosts
        run: cat ./ansible/hosts
      - name: Install ansible
        run: pip install ansible
      # - name: Test Ansible
      #   run: |
      #     export ANSIBLE_HOST_KEY_CHECKING=False
      #     ansible all -i hosts -m ping -e "ansible_user=ubuntu"
      #   working-directory: ansible
      - name: Test Ansible Playbook
        run: |
          cat hosts
          ansible-playbook -i hosts deploy.yml -e "ansible_ssh_private_key_file=~/.ssh/github_actions"
        working-directory: ansible
  # destroy_uat:
  #   needs: deploy_and_uat
  #   environment: uat # configured for approval
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: terraform
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #   steps:
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - name: Setup terraform
  #       uses: hashicorp/setup-terraform@v1
  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
  #     - name: Terraform Destroy
  #       id: destroy
  #       run: terraform destroy --auto-approve -no-color -var="env=uat" -var="ssh_pub_key=${{ secrets.SSH_PUBLIC_KEY }}"